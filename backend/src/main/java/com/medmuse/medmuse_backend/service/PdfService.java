// PdfService.java
package com.medmuse.medmuse_backend.service;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.*;
import java.time.format.DateTimeFormatter;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfWriter;
import com.medmuse.medmuse_backend.entity.Report;
import com.medmuse.medmuse_backend.service.interfaces.PdfServiceInterface;
import com.medmuse.medmuse_backend.util.ExceptionHandler;

@Service
public class PdfService implements PdfServiceInterface {

    @Value("${medmuse.storage.pdf.directory}")
    private String pdfDirectory;

    @Override
    public String generateReportPdf(Report report) {
        Path filePath = null;
        try {
            Path directory = Paths.get(pdfDirectory);
            if (Files.notExists(directory)) {
                Files.createDirectories(directory);
            }

            String filename = String.format("health-report-%d-%s.pdf",
                    report.getId(), report.getWeekStartDate().toString());
            filePath = directory.resolve(filename);

            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(filePath.toFile()));
            document.open();

            addHeader(document, report);
            addSection(document, "Health Summary", report.getHealthSummary());
            addSection(document, "Areas of Attention", report.getRiskAreas());
            addSection(document, "Personalized Recommendations", report.getRecommendations());
            addDisclaimer(document);
            addFooter(document);

            document.close();
            return filePath.toString();
        } catch (Exception e) {
            ExceptionHandler.handleFileOperationException("PDF generation",
                    filePath != null ? filePath.toString() : "unknown", e);
            throw new RuntimeException("Failed to generate PDF", e);
        }
    }

    @Override
    public byte[] readPdfFile(String filePath) {
        try {
            return Files.readAllBytes(Paths.get(filePath));
        } catch (IOException e) {
            ExceptionHandler.handleFileOperationException("PDF read", filePath, e);
            throw new RuntimeException("Failed to read PDF file", e);
        }
    }

    @Override
    public void deletePdfFile(String filePath) {
        try {
            Files.deleteIfExists(Paths.get(filePath));
        } catch (IOException e) {
            ExceptionHandler.handleFileOperationException("PDF delete", filePath, e);
        }
    }

    // --- Helpers ---
    private void addHeader(Document document, Report report) throws DocumentException {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMMM dd, yyyy");
        Paragraph title = new Paragraph("MedMuse Health Report",
                FontFactory.getFont(FontFactory.HELVETICA_BOLD, 24));
        title.setAlignment(Element.ALIGN_CENTER);
        document.add(title);

        Paragraph period = new Paragraph(
                String.format("Report Period: %s - %s",
                        report.getWeekStartDate().format(formatter),
                        report.getWeekEndDate().format(formatter)),
                FontFactory.getFont(FontFactory.HELVETICA, 12));
        period.setAlignment(Element.ALIGN_CENTER);
        document.add(period);

        Paragraph generated = new Paragraph(
                String.format("Generated on: %s",
                        report.getGeneratedAt().format(DateTimeFormatter.ofPattern("MMMM dd, yyyy 'at' HH:mm"))),
                FontFactory.getFont(FontFactory.HELVETICA, 10));
        generated.setAlignment(Element.ALIGN_CENTER);
        generated.setSpacingAfter(20f);
        document.add(generated);
    }

    private void addSection(Document doc, String title, String content) throws DocumentException {
        if (content == null || content.isBlank()) {
            return;
        }
        Paragraph header = new Paragraph(title, FontFactory.getFont(FontFactory.HELVETICA_BOLD, 16));
        doc.add(header);
        for (String line : content.split("\n")) {
            if (!line.trim().isEmpty()) {
                Paragraph p = new Paragraph("â€¢ " + line.trim(),
                        FontFactory.getFont(FontFactory.HELVETICA, 12));
                p.setIndentationLeft(20f);
                p.setSpacingAfter(3f);
                doc.add(p);
            }
        }
        doc.add(new Paragraph("\n"));
    }

    private void addDisclaimer(Document doc) throws DocumentException {
        Paragraph header = new Paragraph("Medical Disclaimer",
                FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14));
        doc.add(header);

        Paragraph disclaimer = new Paragraph(
                "This report is generated by AI for informational purposes only. "
                + "Consult a qualified healthcare provider for medical advice.",
                new Font(Font.FontFamily.HELVETICA, 10, Font.ITALIC, BaseColor.DARK_GRAY)
        );
        disclaimer.setSpacingBefore(5f);
        disclaimer.setSpacingAfter(20f);
        doc.add(disclaimer);
    }

    private void addFooter(Document doc) throws DocumentException {
        Paragraph footer = new Paragraph("Generated by MedMuse Healthcare Platform",
                FontFactory.getFont(FontFactory.HELVETICA, 10));
        footer.setAlignment(Element.ALIGN_CENTER);
        footer.setSpacingBefore(30f);
        doc.add(footer);
    }
}
